getwd()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
library(limma)
install.packages("tidyverse")
install.packages("quarto")
install.packages('xaringan')
install.packages(c("rmarkdown", "knitr", "xaringan"))
options(htmltools.dir.version = FALSE)
#knitr::include_graphics()
knitr::opts_chunk$set(
fig.width=9, fig.height=3.5, fig.retina=3,
out.width = "100%",
cache = TRUE,
echo = TRUE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
library(xaringanthemer)
value <- 2
value + 3
options(htmltools.dir.version = FALSE)
#knitr::include_graphics()
knitr::opts_chunk$set(
fig.width=9, fig.height=3.5, fig.retina=3,
out.width = "100%",
cache = TRUE,
echo = TRUE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
library(dplyr)
library(kableExtra)
library(ggplot2)
library(DESeq2)
library(apeglm)
library(tibble)
library(ggrepel)
library(clusterProfiler)
library(org.Hs.eg.db)
library(xaringanthemer)
# style_duo_accent(
#   primary_color = "#1381B0",
#   secondary_color = "#FF961C",
#   inverse_header_color = "#FFFFFF",
#   title_slide_text_color = "#FFFFFF"
# )
value <- 2
value + 3
coldata <- read.csv('dades/coldata.csv')
kbl(head(coldata,10)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), font_size = 14)
countData <- read.delim('dades/GSE157103_raw_counts_GRCh38.p13_NCBI.tsv')
rownames(countData) <- countData$GeneID
countData$GeneID <- NULL
kbl(countData[1:5,1:8]) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), font_size = 14)
annot <- read.delim('dades/Human.GRCh38.p13.annot.tsv')
kbl(annot %>% dplyr::filter(GeneType == 'protein-coding') %>% dplyr::select(1:4) %>% head()) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), font_size = 14)
idx <- match(rownames(countData), annot$GeneID)
gene_symbol <- annot$Symbol[idx]
all(!is.na(gene_symbol))
rownames(countData) <- paste(rownames(countData),gene_symbol, sep='_')
kbl(countData[1:6,1:8]) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), font_size = 14)
kbl(countData[c(1:3,8:12),1:8]) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), font_size = 14)
x <- read.table("dades/methods.tab", header = T, sep = "\t", encoding = "UTF-8")
x
is(x)
metodes_expr <- data.frame(
Mètode = c(
"CPM (comptatge per milió)",
"TPM (transcrits per quilobase i milió)",
"RPKM/FPKM (lectures/fragments per quilobase d'exó per milió de lectures/fragments alineats)",
"DESeq2: proporció de la mediana",
"EdgeR: TMM (mitjana retallada dels valors M)"
),
Descripció = c(
"comptatges escalats pel total de lectures",
"comptatges per la longitud del transcrit (kb) per milió de lectures alineades",
"semblant al TPM",
"comptatges dividits per un factor específic de la mida de la mostra determinat per la mediana de comptatges per gen relativa a la mitjana geomètrica",
"utilitza una mitjana ponderada de les proporcions d'expressió logarítmica entre mostres"
),
Factors = c(
"profunditat de seqüenciació",
"profunditat de seqüenciació i mida del gen",
"profunditat de seqüenciació i mida del gen",
"profunditat de seqüenciació i composició de l'ARN",
"profunditat de seqüenciació, composició de l'ARN i mida del gen"
),
Recomanacions = c(
"comparacions de comptatges entre rèpliques del mateix grup de mostra; NO per a comparacions dins de la mostra ni per a anàlisi diferencial (DE)",
"comparacions de comptatges dins d'una mostra o entre mostres del mateix grup; NO per a anàlisi diferencial (DE)",
"comparacions de comptatges entre gens dins d'una mateixa mostra; NO per a comparacions entre mostres ni anàlisi diferencial (DE)",
"comparacions de comptatges entre mostres i per a anàlisi diferencial (DE); NO per a comparacions dins de la mostra",
"comparacions de comptatges tant dins com entre mostres i per a anàlisi diferencial (DE)"
),
stringsAsFactors = FALSE
)
kbl(metodes_expr) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), font_size = 14)
signif_res <- res_tableOE_tb[res_tableOE_tb$padj < 0.001 &
!is.na(res_tableOE_tb$padj) &
res_tableOE_tb$log2FoldChange >= log2(1.5), ]
signif_genes <- as.character(signif_res$gene)
setwd("C:/Users/acorr/OneDrive/CURSO CIBEREHD/2025/Avanzado/02_RMarkdown")
unlink("C:/Users/Marta/OneDrive - UAB/Bioestadística/Teoría/0.Introduccion/PresentacionBioestadistica_cache", recursive = TRUE)
setwd("C:/Users/Marta/OneDrive - UAB/Bioestadística/Teoría/1.Estadística descriptiva")
unlink("1.EstadisticaDescriptiva_cache", recursive = TRUE)
setwd("C:/Users/Marta/OneDrive - UAB/Bioestadística/Seminarios/S2")
library(biomaRt)
# Connect to Ensembl Metazoa
mart <- useMart("metazoa_mart", dataset="dmelanogaster_gene_ensembl", host="metazoa.ensembl.org")
# Map transcript ID to FBgn
getBM(attributes = c("ensembl_gene_id", "flybase_gene_id", "refseq_mrna"),
filters = "refseq_mrna",
values = "NM_001144655",
mart = mart)
mart <- useMart("metazoa_mart", dataset="dmelanogaster_gene_ensembl", host="metazoa.ensembl.org")
mart <- useMart("metazoa_mart", dataset="dmelanogaster_gene_ensembl", host="https://metazoa.ensembl.org")
listDatasets()
library(biomaRt)
ensembl_metazoa <- useEnsemblBioMart(
biomart = "metazoa_mart",
host = "https://metazoa.ensembl.org"
)
listDatasets(ensembl_metazoa)
> library(biomaRt)
>
> ensembl_metazoa <- useEnsemblBioMart(
+     biomart = "metazoa_mart",
+     host = "https://metazoa.ensembl.org"
+ )
Error in is(mart, "Mart") : objeto 'ensembl_metazoa' no encontrado
>
> listDatasets(ensembl_metazoa)
Error in is(mart, "Mart") : objeto 'ensembl_metazoa' no encontrado
library(biomaRt)
# Conéctate al BioMart de Ensembl Metazoa
ensembl_metazoa <- useMart(
biomart = "metazoa_mart",
host = "https://metazoa.ensembl.org"
)
# Lista todos los datasets disponibles en este mart
listDatasets(ensembl_metazoa)
library(biomaRt)
# Conéctate al BioMart de Ensembl Metazoa
ensembl_metazoa <- useMart(
biomart = "metazoa_mart",
host = "https://metazoa.ensembl.org"
)
# Lista todos los datasets disponibles en este mart
listDatasets(ensembl_metazoa) %>% View()
library(dplyr)
library(biomaRt)
# Conéctate al BioMart de Ensembl Metazoa
ensembl_metazoa <- useMart(
biomart = "metazoa_mart",
host = "https://metazoa.ensembl.org"
)
# Lista todos los datasets disponibles en este mart
listDatasets(ensembl_metazoa) %>% View()
mart <- useMart(
biomart = "metazoa_mart",
dataset = "dmelanogaster_eg_gene",
host = "https://metazoa.ensembl.org"
)
# Ahora mapea tu RefSeq transcript NM_... a FBgn
getBM(
attributes = c("ensembl_gene_id", "flybase_gene_id", "refseq_mrna"),
filters = "refseq_mrna",
values = "NM_001144655",
mart = mart
)
# Ahora mapea tu RefSeq transcript NM_... a FBgn
getBM(
attributes = c("ensembl_gene_id", "flybase_gene_id", "refseq_mrna"),
filters = "refseq_mrna",
values = "NM_001144655",
mart = mart
)
biomaRt::getBM(
attributes = c("ensembl_gene_id", "flybase_gene_id", "refseq_mrna"),
filters = "refseq_mrna",
values = "NM_001144655",
mart = mart
)
getBM(  filters = "refseq_mrna",
values = "NM_001144655",
mart = mart
)
# Ahora mapea tu RefSeq transcript NM_... a FBgn
getBM(
attributes = c("flybase_gene_id", "refseq_mrna"),
filters = "refseq_mrna",
values = "NM_001144655",
mart = mart
)
# Ahora mapea tu RefSeq transcript NM_... a FBgn
getBM(
attributes = c("refseq_mrna"),
filters = "refseq_mrna",
values = "NM_001144655",
mart = mart
)
biomaRt::getBM(
attributes = c("ensembl_gene_id", "flybase_gene_id", "refseq_mrna"),
filters = "refseq_mrna",
values = "NM_001144655",
mart = mart
)
rlang::last_trace()
unload(dplyr)
detach("package:dbplyr", unload=T)
detach("package:dplyr", unload=T)
