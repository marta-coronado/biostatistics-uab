labs(x = "Year", y = "Citations") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
panel.grid = element_blank()  # Elimina las líneas de la cuadrícula
)
ggsave(filename="plot3.svg")
data_citations$year<-as.factor(data_citations$year)
# Crear el gráfico de barras
ggplot(data_citations, aes(x = year, y = citations)) +
geom_bar(stat = "identity", color = "gray30") +
labs(x = "Year", y = "Citations") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
panel.grid = element_blank()  # Elimina las líneas de la cuadrícula
)
ggsave(filename="plot3.svg")
# Crear el dataframe
data_grades <- data.frame(
year = c("2019/2020", "2020/2021", "2021/2022", "2022/2023", "2023/2024"),
prof_grade = c(9.92, 9.75, 9.38, 9.73, 9.70),
subject_grade = c(9.31, 9.31, 9.67, 9.08, 8.42)
)
# Ver el dataframe
data_grades
library(ggplot2)
# Reshape the data for ggplot
data_long <- data_grades %>%
gather(key = "type", value = "grade", prof_grade, subject_grade)
# Crear el gráfico de líneas
ggplot(data_long, aes(x = year, y = grade, color = type, group = type)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(title = "Grades Over the Years", x = "Year", y = "Grade") +
scale_color_manual(values = c("prof_grade" = "#66c2a5", "subject_grade" = "#fc8d62"),
labels = c("Professor", "Subject")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))  # Centra el título
library(ggplot2)
library(tidyr)
# Crear el dataframe
data_grades <- data.frame(
year = c("2019/2020", "2020/2021", "2021/2022", "2022/2023", "2023/2024"),
prof_grade = c(9.92, 9.75, 9.38, 9.73, 9.70),
subject_grade = c(9.31, 9.31, 9.67, 9.08, 8.42)
)
# Reshape the data for ggplot
data_long <- data_grades %>%
gather(key = "type", value = "grade", prof_grade, subject_grade)
# Crear el gráfico de líneas sin cuadrícula y todo en negro
ggplot(data_long, aes(x = year, y = grade, color = type, group = type)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(title = "Grades Over the Years", x = "Year", y = "Grade") +
scale_color_manual(values = c("prof_grade" = "black", "subject_grade" = "black"),
labels = c("Professor", "Subject")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
panel.grid = element_blank(),  # Elimina las líneas de la cuadrícula
legend.title = element_text(color = "black"),
legend.text = element_text(color = "black")
)
library(ggplot2)
library(tidyr)
# Crear el dataframe
data_grades <- data.frame(
year = c("2019/2020", "2020/2021", "2021/2022", "2022/2023", "2023/2024"),
prof_grade = c(9.92, 9.75, 9.38, 9.73, 9.70),
subject_grade = c(9.31, 9.31, 9.67, 9.08, 8.42)
)
# Reshape the data for ggplot
data_long <- data_grades %>%
gather(key = "type", value = "grade", prof_grade, subject_grade)
# Crear el gráfico de líneas sin cuadrícula y todo en negro
ggplot(data_long, aes(x = year, y = grade, color = type, group = type)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(title = "Grades Over the Years", x = "Year", y = "Grade") +
scale_color_manual(values = c("prof_grade" = "black", "subject_grade" = "black"),
labels = c("Professor", "Subject")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
panel.grid = element_blank(),  # Elimina las líneas de la cuadrícula
legend.title = element_text(color = "black"),
legend.text = element_text(color = "black") + ylim(c(0,10))
)
library(ggplot2)
library(tidyr)
# Crear el dataframe
data_grades <- data.frame(
year = c("2019/2020", "2020/2021", "2021/2022", "2022/2023", "2023/2024"),
prof_grade = c(9.92, 9.75, 9.38, 9.73, 9.70),
subject_grade = c(9.31, 9.31, 9.67, 9.08, 8.42)
)
# Reshape the data for ggplot
data_long <- data_grades %>%
gather(key = "type", value = "grade", prof_grade, subject_grade)
# Crear el gráfico de líneas sin cuadrícula y todo en negro
ggplot(data_long, aes(x = year, y = grade, color = type, group = type)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(title = "Grades Over the Years", x = "Year", y = "Grade") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
panel.grid = element_blank(),  # Elimina las líneas de la cuadrícula
legend.title = element_text(color = "black"),
legend.text = element_text(color = "black") + ylim(c(0,10))
)
library(ggplot2)
library(tidyr)
# Crear el dataframe
data_grades <- data.frame(
year = c("2019/2020", "2020/2021", "2021/2022", "2022/2023", "2023/2024"),
prof_grade = c(9.92, 9.75, 9.38, 9.73, 9.70),
subject_grade = c(9.31, 9.31, 9.67, 9.08, 8.42)
)
# Reshape the data for ggplot
data_long <- data_grades %>%
gather(key = "type", value = "grade", prof_grade, subject_grade)
# Crear el gráfico de líneas sin cuadrícula y todo en negro
ggplot(data_long, aes(x = year, y = grade, color = type, group = type)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(title = "Grades Over the Years", x = "Year", y = "Grade") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
panel.grid = element_blank(),  # Elimina las líneas de la cuadrícula
legend.title = element_text(color = "black"),
legend.text = element_text(color = "black") + ylim(0,10)
)
library(ggplot2)
library(tidyr)
# Crear el dataframe
data_grades <- data.frame(
year = c("2019/2020", "2020/2021", "2021/2022", "2022/2023", "2023/2024"),
prof_grade = c(9.92, 9.75, 9.38, 9.73, 9.70),
subject_grade = c(9.31, 9.31, 9.67, 9.08, 8.42)
)
# Reshape the data for ggplot
data_long <- data_grades %>%
gather(key = "type", value = "grade", prof_grade, subject_grade)
# Crear el gráfico de líneas sin cuadrícula y todo en negro
ggplot(data_long, aes(x = year, y = grade, color = type, group = type)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(title = "Grades Over the Years", x = "Year", y = "Grade") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
panel.grid = element_blank(),  # Elimina las líneas de la cuadrícula
legend.title = element_text(color = "black"),
legend.text = element_text(color = "black") +
coord_cartesian(ylim = c(0, 10)
)
)
library(ggplot2)
library(tidyr)
# Crear el dataframe
data_grades <- data.frame(
year = c("2019/2020", "2020/2021", "2021/2022", "2022/2023", "2023/2024"),
prof_grade = c(9.92, 9.75, 9.38, 9.73, 9.70),
subject_grade = c(9.31, 9.31, 9.67, 9.08, 8.42)
)
# Reshape the data for ggplot
data_long <- data_grades %>%
gather(key = "type", value = "grade", prof_grade, subject_grade)
# Crear el gráfico de líneas sin cuadrícula y todo en negro
ggplot(data_long, aes(x = year, y = grade, color = type, group = type)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(title = "Grades Over the Years", x = "Year", y = "Grade") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
panel.grid = element_blank(),  # Elimina las líneas de la cuadrícula
legend.title = element_text(color = "black"),
legend.text = element_text(color = "black")) +
coord_cartesian(ylim = c(0, 10))
library(ggplot2)
library(tidyr)
# Crear el dataframe
data_grades <- data.frame(
year = c("2019/2020", "2020/2021", "2021/2022", "2022/2023", "2023/2024"),
prof_grade = c(9.92, 9.75, 9.38, 9.73, 9.70),
subject_grade = c(9.31, 9.31, 9.67, 9.08, 8.42)
)
# Reshape the data for ggplot
data_long <- data_grades %>%
gather(key = "type", value = "grade", prof_grade, subject_grade)
# Crear el gráfico de líneas sin cuadrícula y todo en negro
ggplot(data_long, aes(x = year, y = grade, color = type, group = type)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(title = "Grades Over the Years", x = "Year", y = "Grade") +
theme_minimal(base_size = 16) +
theme(
plot.title = element_text(hjust = 0.5, color = "black"),
axis.title = element_text(color = "black"),
axis.text = element_text(color = "black"),
panel.grid = element_blank(),  # Elimina las líneas de la cuadrícula
legend.title = element_text(color = "black"),
legend.text = element_text(color = "black")) +
coord_cartesian(ylim = c(0, 10))
ggsave(filename="plot4.svg")
library(raster)
et01_raster <- raster("../Escritorio/Global-AI_ET0_v3_annual/et0_v3_yr.tif")
View(et01_raster)
lon <- 34.59
lat <- 8.25
coords <- cbind(lon, lat)
# Extract the value
et01_value <- extract(et01_raster, coords)
# Print result
print(et01_value)
lon <- 11.08755
lat <- 46.212856
coords <- cbind(lon, lat)
# Extract the value
et01_value <- extract(et01_raster, coords)
# Print result
print(et01_value)
lon <- 11.09
lat <- 46.21
coords <- cbind(lon, lat)
# Extract the value
et01_value <- extract(et01_raster, coords)
# Print result
print(et01_value)
lon <- 38.63
lat <- 9.81
coords <- cbind(lon, lat)
# Extract the value
et01_value <- extract(et01_raster, coords)
# Print result
print(et01_value)
et01_raster <- raster("../Escritorio/Global-AI_ET0_v3_annual/et0_v3_yr_sd.tif")
lon <- 38.63
lat <- 9.81
coords <- cbind(lon, lat)
# Extract the value
et01_value <- extract(et01_raster, coords)
# Print result
print(et01_value)
et01_raster <- raster("../Escritorio/Global-AI_ET0_v3_annual/ai_v3_yr.tif")
lon <- 38.63
lat <- 9.81
coords <- cbind(lon, lat)
# Extract the value
et01_value <- extract(et01_raster, coords)
# Print result
print(et01_value)
et01_raster <- raster("../Escritorio/Global-AI_ET0_v3_annual/ai_v3_yr.tif")
lon <- 34.59
lat <- 8.25
coords <- cbind(lon, lat)
# Extract the value
et01_value <- extract(et01_raster, coords)
# Print result
print(et01_value)
et01_raster <- raster("../Escritorio/Global-AI_ET0_v3_annual/et0_v3_yr.tif")
lon <- 34.59
lat <- 8.25
coords <- cbind(lon, lat)
# Extract the value
et01_value <- extract(et01_raster, coords)
# Print result
print(et01_value)
install.packages(c("aplot", "data.table", "gapminder"))
setwd("C:/Users/eduar/Dropbox/DOCENCIA/UAB/Genètica/Bioestadística")
xaringan::inf_mr()
# Load necessary libraries
library(ggplot2)
library(readr)
# Read the data
url <- "https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv"
temp_data <- read_csv(url, skip = 1)
temp_data <- data.table::fread("https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv")
temp_data <- data.table::fread("GLB.Ts+dSST.csv")
temp_data <- data.table::fread("~/Descargas/GLB.Ts+dSST.csv")
temp_data <- data.table::fread("~/Escritorio/GLB.Ts+dSST.csv")
temp_data <- data.table::fread("C:/Users/eduar/OneDrive/Escritorio//GLB.Ts+dSST.csv")
temp_data
# Select relevant columns and rename them
temp_data <- temp_data %>%
select(Year, `J-D`) %>%
rename(Year = Year, Anomaly = `J-D`)
# Remove rows with missing data
temp_data <- na.omit(temp_data)
# Create the plot
ggplot(temp_data, aes(x = Year, y = Anomaly)) +
geom_line(color = "blue") +
labs(
title = "Global Annual Mean Temperature Anomaly",
subtitle = "Based on NASA GISS GISTEMP v4",
x = "Year",
y = "Temperature Anomaly (°C)"
) +
theme_minimal()
View(temp_data)
# Create the plot
ggplot(temp_data, aes(x = Year, y = Anomaly)) +
geom_point(color = "blue") +
labs(
title = "Global Annual Mean Temperature Anomaly",
subtitle = "Based on NASA GISS GISTEMP v4",
x = "Year",
y = "Temperature Anomaly (°C)"
) +
theme_minimal()
xaringan::inf_mr()
setwd("C:/Users/eduar/Dropbox/DOCENCIA/UAB/Genètica/Bioestadística/0.Introduccion")
setwd("C:/Users/eduar/Dropbox/DOCENCIA/UAB/Genètica/Bioestadística/Teoría/1.Estadística descriptiva")
xaringan::inf_mr()
unlink("1.EstadisticaDescriptiva_cache", recursive = TRUE)
library(ggplot2)
# --- Ejemplo 1: Variable nominal (Grupo sanguíneo) ---
set.seed(123)
df_nom <- data.frame(
grupo_sanguineo = sample(c("A", "B", "AB", "O"), size = 100, replace = TRUE)
)
p_nominal <- ggplot(df_nom, aes(x = grupo_sanguineo, fill = grupo_sanguineo)) +
geom_bar(color = "black", alpha = 0.8) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Distribución de Grupos Sanguíneos",
x = "Grupo Sanguíneo",
y = "Frecuencia") +
theme_minimal() +
theme(legend.position = "none")
# Mostrar
p_nominal
# --- Ejemplo 2: Variable ordinal (Nivel de tratamiento) ---
df_ord <- data.frame(
nivel_tratamiento = factor(
sample(c("Bajo", "Medio", "Alto"), size = 100, replace = TRUE),
levels = c("Bajo", "Medio", "Alto"), # importante para ordinal
ordered = TRUE
)
)
p_ordinal <- ggplot(df_ord, aes(x = nivel_tratamiento, fill = nivel_tratamiento)) +
geom_bar(color = "black", alpha = 0.8) +
scale_fill_brewer(palette = "Oranges") +
labs(title = "Distribución de Nivel de Tratamiento",
x = "Nivel de Tratamiento",
y = "Frecuencia") +
theme_minimal() +
theme(legend.position = "none")
# Mostrar
p_ordinal
library(ggplot2)
# --- Variable nominal (Grupo sanguíneo) ---
set.seed(123)
df_nom <- data.frame(
grupo_sanguineo = sample(c("A", "B", "AB", "O"), size = 100, replace = TRUE)
)
p_nominal <- ggplot(df_nom, aes(x = grupo_sanguineo, fill = grupo_sanguineo)) +
geom_bar(color = "black", alpha = 0.8) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Distribución de Grupos Sanguíneos", x = NULL, y = NULL) +
theme_minimal() +
theme(
legend.position = "none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank()
)
p_nominal
# --- Variable ordinal (Nivel de tratamiento) ---
df_ord <- data.frame(
nivel_tratamiento = factor(
sample(c("Bajo", "Medio", "Alto"), size = 100, replace = TRUE),
levels = c("Bajo", "Medio", "Alto"), ordered = TRUE
)
)
p_ordinal <- ggplot(df_ord, aes(x = nivel_tratamiento, fill = nivel_tratamiento)) +
geom_bar(color = "black", alpha = 0.8) +
scale_fill_brewer(palette = "Oranges") +
labs(title = "Distribución de Nivel de Tratamiento", x = NULL, y = NULL) +
theme_minimal() +
theme(
legend.position = "n
set.seed(42) # para hacer el código reproducible
data_vec <- rnorm(mean = 20, sd = 3, n = 100)
data_vec
mean(data_vec)
unlink("1.EstadisticaDescriptiva_cache", recursive = TRUE)
options(htmltools.dir.version = FALSE)
#knitr::include_graphics()
knitr::opts_chunk$set(
cache = TRUE,
message = FALSE,
warning = FALSE,
hiline = TRUE,
fig.retina = 5
)
library(ggplot2)
library(readr)
library(knitr)
#pagedown::chrome_print(".html")
# Gráfico
ggplot(dens_df, aes(x = x, y = y)) +
# Curva de densidad (R base)
geom_area(fill = "skyblue", alpha = 0.7, color = NA) +
# Líneas de referencia
geom_vline(xintercept = mean_val, color = "red", linetype = "dashed", size = 1) +
# Anotaciones
annotate("text", x = mean_val, y = max(dens_df$y)*0.9,
label = paste0("Media = ", round(mean_val, 2)),
color = "red", angle = 90, vjust = -0.5, hjust = -0.2)  +
# Títulos y tema
labs(title = "Distribución de los datos con rango, media y mediana",
x = "Valores", y = "Densidad") +
theme_minimal(base_size = 16) +
theme(panel.grid = element_blank(),)
set.seed(42)
data_vec <- rexp(100, rate = 0.2) + 10  # desplazamos para que no sea muy cerca de 0
mean(data_vec)
median(data_vec)
as.data.frame(valor=data_vec)
df
data_vec
data.frame(valor=data_vec)
rexp(100, rate = 0.2)
rexp(100, rate = 0.2) + 10
rexp(100, rate = 0.1) + 10
unlink("1.EstadisticaDescriptiva_cache", recursive = TRUE)
mode
25+50
75/2
library(ggplot2)
# Cuantiles que queremos calcular
q <- c(0.1, 0.5, 0.95, 0.99)
quants <- quantile(data_vec, q)
# Calcular densidad en R base
d <- density(data_vec)
# Crear data frame con la densidad "cerrada"
dens_df <- data.frame(
x = c(min(data_vec), d$x, max(data_vec)),
y = c(0, d$y, 0)
)
# Valores de resumen
mean_val <- mean(data_vec)
# Gráfico
ggplot(dens_df, aes(x = x, y = y)) +
# Curva de densidad
geom_area(fill = "#0E8A8A", alpha = 0.5, color = NA) +
# Línea de la media
geom_vline(xintercept = mean_val, color = "firebrick4", linetype = "dashed", size = 1) +
# Líneas de los cuantiles
geom_vline(xintercept = quants, color = "purple4", linetype = "dotted", size = 1) +
# Texto de la media
annotate("text", x = mean_val, y = max(dens_df$y)*0.4,
label = paste0("Media = ", round(mean_val, 2)),
color = "firebrick4", angle = 90, vjust = -0.5, hjust = -0.2, size = 6) +
# Texto de los cuantiles
annotate("text", x = quants, y = max(dens_df$y)*0.2,
label = paste0(names(quants), " = ", round(quants, 2)),
color = "purple4", angle = 90, vjust = -0.5, hjust = -0.2, size = 5) +
# Títulos y tema
labs(title = "Distribución de los datos con cuantiles",
x = "", y = "") +
theme_minimal(base_size = 18) +
theme(panel.grid = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text = element_text(color = "black"))
unlink("1.EstadisticaDescriptiva_cache", recursive = TRUE)
unlink("1.EstadisticaDescriptiva_cache", recursive = TRUE)
unlink("1.EstadisticaDescriptiva_cache", recursive = TRUE)
xaringan::inf_mr()
df
q_vals <- quantile(df$valor, probs = c(0.25, 0.5, 0.75))
ggplot(df1, aes(x = 1, y = valor))
data_vec <- rexp(100, rate = 0.1) + 10
boxplot(data_vec)
set.seed(42) # para hacer el código reproducible
data_vec <- rexp(100, rate = 0.1) + 10
df <- data.frame(valor=data_vec)
q_vals <- quantile(df$valor, probs = c(0.25, 0.5, 0.75))
q_vals
ggplot(df, aes(x = 1, y = valor)) +
geom_boxplot(width = 0.1, fill = "orange", alpha = 0.7, outlier.color = "red")
mean(data_vec)
df
df > upper_fence
table(df > upper_fence)
table(df > lower_fence)
table(df < lower_fence)
unlink("1.EstadisticaDescriptiva_cache", recursive = TRUE)
unlink("1.EstadisticaDescriptiva_cache", recursive = TRUE)
unlink("1.EstadisticaDescriptiva_cache", recursive = TRUE)
xaringan::inf_mr()
